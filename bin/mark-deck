#!/usr/bin/env node
var argv;
var yargs = require('yargs');
var fs = require('fs');
var MarkDeck = require('../deck');
var NuFO = require('nufo');
var asynk = require('async');
var express = require('express');
var Readable = require('stream').Readable;
var exec = require('child_process').exec;

var targetDeck = function(target, cb){
    fs.readFile(target, function(err, body){
        if(err) return cb(err);
        var deck = new MarkDeck();
        deck.parse(body.toString(), function(err, pages){
            return cb(err, pages, function(cb){
                deck.render({
                    pages : pages,
                    format : 'normalize',
                    type : 'markdown',
                }, function(err, slides, slidesIndex){
                    cb(err, slides, slidesIndex)
                });
            });
        });
    });
};

var makeStream = function(str){
    var s = new Readable();
    s.push(str);
    s.push(null);
    return s;
}

var serve = function(target, cb){
    fs.readFile(__dirname + '/../index.html', function(err, body){
        if(err) throw err;
        var indexBody = body.toString();
        targetDeck(target, function(err, pages, render){
            var app = express();
            render(function(err, slides, slidesIndex){
                app.get('/', function(req, res){
                    res.write(indexBody.replace(
                        '<!--###[SLIDES]###-->',
                        slides.join('')
                    ));
                    res.end();
                });
                app.use(express.static(__dirname + '/../node_modules/reveal.js/'));
                app.listen(port, cb);
            });
        });
    });
}

var port = 8080;

var CLApp = require('app-term-kit');
var app = new CLApp('deck', {
    copyright : 'Abbey Hawk Sparrow',
    trademark : 'Abbey Hawk Sparrow',
    copystart : '2014',
    fslink : ':modules:/local-plugins',
    defaults : `{
    // defaults go here.
    "bitdepth": 2,
    //request-as-request, fetch-as-request, axios-as-request
    "requestlib": "request-as-request"
}`
});
app.useable(function(err){
    app.config(function(err, conf, writeConfig){
        //if(conf.requestlib) art.use('request', require(conf.requestlib));
        app.command({
            name:'cat',
            description: 'show the slides on the command line',
            examples: [[
                '$0 cat my/slides.md ', 'output myslides as inline ascii text'
            ]],
            action : function(argv, target, complete){
                targetDeck(target, function(err, pages){
                    if(err) throw err;
                    asynk.eachOfLimit(pages, 1, function(page, index, done){
                        var document = new NuFO({
                            body : makeStream(page.markdown),
                        });
                        document.transform('NFO', function(err, result){
                            if(err) throw err;
                            console.log(result+"\n");
                            console.log("\n\n"+'================================'+"\n\n");
                            done();
                        });
                    }, function(){
                        console.log('[DONE]');
                    });
                });
            }
        });
        app.command({
            name:'serve',
            description: 'serve the deck locally',
            examples: [
                ['$0 serve ~/my-markdown.md ', 'show the deck through a web browser']
            ],
            action : function(argv, target, complete){
                serve(target, function(){
                    complete();
                });
            }
        });
        app.command({
            name:'show',
            description: 'open a browser on the local server',
            examples: [],
            action : function(argv, target, complete){
                exec('open http://localhost:'+port);
                complete();
            }
        });
        app.command({
            name:'export',
            description: 'convert the deck to another format',
            examples: [],
            action : function(argv, target, complete){
                console.log('EXPORT!');
            }
        });
        app.command({
            name:'s',
            description: 'serve + open browser',
            examples: [],
            action : function(argv, target, complete){
                serve(target, function(){
                    exec('open http://localhost:'+port);
                });
            }
        });
        app.argument('format', 'string','the output format to render to', 1, [
            'pdf', 'ppt', 'nfo', 'key'
        ]);
        app.help();
        app.header('deck');
        app.footer();
        app.run(function(ex){
            if(ex) throw ex;
        })
    });
});
